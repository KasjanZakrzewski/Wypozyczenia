@model WypozyczeniaAPI.Models.MyModelSingle<Pojazd, List<Pozycja>, Stack<DateTime>>

@{
    ViewData["Title"] = "Detale";
    if (ViewBag.Layout != null)
    {
        Layout = ViewBag.Layout;
    }
    else
    {
        Layout = "~/Views/Shared/_Layout_admin.cshtml";
    }
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin="" />
<!-- Make sure you put this AFTER Leaflet's CSS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>

<h1>Detale</h1>

<div>
    <h4>Pojazd</h4>
    <hr />

    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Obj1.Rejestracja)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Obj1.Rejestracja)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Obj1.Marka)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Obj1.Marka)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Obj1.Model)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Obj1.Model)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Obj1.NS)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Obj1.NS)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Obj1.WE)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Obj1.WE)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Obj1.Hash)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Obj1.Hash)
        </dd>
    </dl>
    <h4>Pozcja na mapie:</h4>
    <div id="map" style="width: 100%; height: 400px;"></div>

</div>


<script>
    var WE = parseFloat("@Model.Obj1.WE".replace(',', '.'));
    var NS = parseFloat("@Model.Obj1.NS".replace(',', '.'));

    var map = L.map('map').setView([NS, WE], 16);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    var pozycja = L.marker([NS, WE]).addTo(map);

    var trasa = L.polyline([], { color: 'blue' }).addTo(map);
    var latlng = L.latLng([0, 0]);
    //var wypozyczenieData = Model.Obj3.Pop();
    @{
        var kolorZmiana = true;
        string[] kolor = { "blue", "green" };
        int index = 0;

        var wypozyczenieData = DateTime.Now;
        @try
        {
            wypozyczenieData = Model.Obj3.Pop();
        }
        catch (InvalidOperationException e)
        {

        }
        

        @foreach (var item in Model.Obj2)
        {
            <text>
                var WE = parseFloat("@item.WE".replace(',', '.'));
                var NS = parseFloat("@item.NS".replace(',', '.'));
                var latlng = L.latLng([NS, WE]);
                trasa.addLatLng(latlng);

                @if (@item.Data == wypozyczenieData) {
                    @try
                    {
                        wypozyczenieData = Model.Obj3.Pop();
                    }
                    catch (InvalidOperationException e)
                    {
                        
                    }
                    @if (kolorZmiana)
                    {
                        <text>
                        trasa = L.polyline([], { color: '@kolor[@index]' }).addTo(map);
                        </text>
                        kolorZmiana = !kolorZmiana;

                        index++;
                        @if (index >= 2)
                        {
                            index = 0;
                        }
                    }
                    else
                    {
                        <text>
                            trasa = L.polyline([], { color: 'red' }).addTo(map);
                        </text>
                        kolorZmiana = !kolorZmiana;
                    }
                    
                    <text>
                        trasa.addLatLng(latlng);
                        var marker = L.marker([NS, WE]).addTo(map);
                    </text>
                }
            </text>
        }
    }
</script>
